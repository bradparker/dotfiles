set nocompatible
filetype off

" UTF8 Please
set encoding=utf-8

" Don't save .swap files
set nobackup
set noswapfile
set nowritebackup

" Display incomplete commands
set showcmd

" Colour scheme
if filereadable(expand("~/.vimrc_background"))
  let base16colorspace=256
  source ~/.vimrc_background
endif

" Switch on highlighting the last used search pattern.
if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
  set hlsearch
endif

" Switch wrap off for everything
set nowrap

" Auto commands
if has("autocmd")
  " Enable soft-wrapping for text files
  autocmd FileType text,markdown,html,xhtml,eruby setlocal wrap linebreak nolist

  " Fold YAML Files
  autocmd FileType yaml setlocal foldmethod=indent

  " Disable editor config when editing git commit messages
  autocmd FileType gitcommit let b:EditorConfig_disable = 1

  augroup vimrcEx
    au!

    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid or when inside an event handler
    " (happens when dropping a file on gvim).
    autocmd BufReadPost *
      \ if line("'\"") > 0 && line("'\"") <= line("$") |
      \   exe "normal g`\"" |
      \ endif

  augroup END
endif

" No Help, please
nmap <F1> <Esc>

" Numbers
set number
set numberwidth=5

" When searching, case only matters with mixed case expressions
set ignorecase
set smartcase

" Enable the statusline
set laststatus=2

" \ is the leader character
let mapleader = "\\"

" ********************************
" **** Plugin specific config ****
" ********************************

" FZF
nmap <C-P> :FZF<CR>

" ALE
let g:ale_linters = {
\   'haskell': ['hlint'],
\   'javascript': ['eslint'],
\   'ruby': ['rubocop'],
\}

let g:ale_fixers = {
\   'elm': ['format'],
\   'haskell': ['ormolu'],
\   'javascript': ['prettier'],
\   'ruby': ['rubocop'],
\   'typescript': ['prettier'],
\}

let g:ale_completion_enabled = 1
let g:ale_fix_on_save = 1
