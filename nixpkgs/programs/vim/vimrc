set nocompatible
filetype off

" UTF8 Please
set encoding=utf-8

" Use CTRL-P for FZF
nmap <C-P> :FZF<CR>

" Don't save .swap files, they're annoying
set nobackup
set noswapfile
set nowritebackup

" Display incomplete commands
set showcmd

" Colour scheme
if filereadable(expand("~/.vimrc_background"))
  let base16colorspace=256
  source ~/.vimrc_background
endif

" Switch on highlighting the last used search pattern.
if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
  set hlsearch
endif

" Switch wrap off for everything
set nowrap

" Configure better whitespace
let g:better_whitespace_enabled=1
let g:strip_whitespace_on_save=1

if has("autocmd")
  " Enable soft-wrapping for text files
  autocmd FileType text,markdown,html,xhtml,eruby setlocal wrap linebreak nolist

  augroup vimrcEx
    au!

    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid or when inside an event handler
    " (happens when dropping a file on gvim).
    autocmd BufReadPost *
      \ if line("'\"") > 0 && line("'\"") <= line("$") |
      \   exe "normal g`\"" |
      \ endif

  augroup END
endif

" Softtabs, 2 spaces
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

" \ is the leader character
let mapleader = "\\"

" No Help, please
nmap <F1> <Esc>

" Numbers
set number
set numberwidth=5

" case only matters with mixed case expressions
set ignorecase
set smartcase

set laststatus=2

" vim json
let g:vim_json_syntax_conceal = 0

" ALE
let g:ale_linters = {
\   'javascript': ['eslint'],
\   'ruby': ['rubocop'],
\   'haskell': ['hlint'],
\}

let g:ale_fixers = {
\   'elm': ['format'],
\   'typescript': ['prettier'],
\   'javascript': ['prettier'],
\}

let g:ale_fix_on_save = 1
let g:ale_completion_enabled = 1
